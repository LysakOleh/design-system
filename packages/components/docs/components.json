{
  "timestamp": "2021-11-30T20:29:07",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.11.0",
    "typescriptVersion": "4.3.5"
  },
  "components": [
    {
      "filePath": "./src/components/bal-accordion/bal-accordion.tsx",
      "encapsulation": "scoped",
      "tag": "bal-accordion",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "card",
          "type": "boolean",
          "mutable": false,
          "attr": "card",
          "reflectToAttr": false,
          "docs": "If `true` the accordion is used on the bottom of a card",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeIcon",
          "type": "string",
          "mutable": false,
          "attr": "close-icon",
          "reflectToAttr": false,
          "docs": "Bal-Icon of the close trigger button",
          "docsTags": [],
          "default": "'minus'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeLabel",
          "type": "string",
          "mutable": false,
          "attr": "close-label",
          "reflectToAttr": false,
          "docs": "Label of the close trigger button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"info\" | \"primary\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Type defines the theme of the accordion toggle",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isActive",
          "type": "boolean",
          "mutable": true,
          "attr": "is-active",
          "reflectToAttr": true,
          "docs": "Controls if the accordion is collapsed or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "openIcon",
          "type": "string",
          "mutable": false,
          "attr": "open-icon",
          "reflectToAttr": false,
          "docs": "Bal-Icon of the open trigger button",
          "docsTags": [],
          "default": "'plus'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "openLabel",
          "type": "string",
          "mutable": false,
          "attr": "open-label",
          "reflectToAttr": false,
          "docs": "Label of the open trigger button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Close the accordion",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Open the accordion",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Triggers the accordion",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balCollapse",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emmited when the accordion has changed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-accordion": [
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon",
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-app/bal-app.tsx",
      "encapsulation": "none",
      "tag": "bal-app",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "background",
          "type": "boolean",
          "mutable": false,
          "attr": "background",
          "reflectToAttr": false,
          "docs": "If `true` it adds a light background to the app",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasStickyFooter",
          "type": "boolean",
          "mutable": false,
          "attr": "has-sticky-footer",
          "reflectToAttr": false,
          "docs": "If `true` the bal-app can be used with header, main and footer. The footer will then be sticky to the bottom.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-button/bal-button.tsx",
      "encapsulation": "scoped",
      "tag": "bal-button",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bottomRounded",
          "type": "boolean",
          "mutable": false,
          "attr": "bottom-rounded",
          "reflectToAttr": false,
          "docs": "If `true` the bottom corners get rounded",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"danger\" | \"info\" | \"info-light\" | \"link\" | \"primary\" | \"primary-light\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The color to use from your application's color palette.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "info-light",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "primary-light",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot interact with the button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string | undefined",
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the button has a full width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the URL of the page the link goes to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Name of the left button icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPosition",
          "type": "\"left\" | \"right\"",
          "mutable": false,
          "attr": "icon-position",
          "reflectToAttr": false,
          "docs": "Size of the button",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "Name of the right button icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the button is inverted",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isActive",
          "type": "boolean",
          "mutable": false,
          "attr": "is-active",
          "reflectToAttr": false,
          "docs": "If `true` the button has a active theme",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "link",
          "type": "boolean",
          "mutable": false,
          "attr": "link",
          "reflectToAttr": false,
          "docs": "Turn the button in to a link.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "If `true` the label is hidden and a loading spinner is shown instead.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string | undefined",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the button, which is submitted with the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "outlined",
          "type": "boolean",
          "mutable": false,
          "attr": "outlined",
          "reflectToAttr": false,
          "docs": "If `true` the button is outlined",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Size of the button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "square",
          "type": "boolean",
          "mutable": false,
          "attr": "square",
          "reflectToAttr": false,
          "docs": "If `true` the width of the buttons is limited",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "topRounded",
          "type": "boolean",
          "mutable": false,
          "attr": "top-rounded",
          "reflectToAttr": false,
          "docs": "If `true` the top corners get rounded",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of button.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | undefined",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the button, which is submitted with the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button loses focus.",
          "docsTags": []
        },
        {
          "event": "balDidRender",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has been  rendered.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has focus.",
          "docsTags": []
        },
        {
          "event": "balNavigate",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link element has clicked.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-accordion",
        "bal-card-button",
        "bal-data-value",
        "bal-hint",
        "bal-snackbar",
        "bal-tabs"
      ],
      "dependencies": [
        "bal-spinner",
        "bal-icon",
        "bal-text"
      ],
      "dependencyGraph": {
        "bal-button": [
          "bal-spinner",
          "bal-icon",
          "bal-text"
        ],
        "bal-accordion": [
          "bal-button"
        ],
        "bal-card-button": [
          "bal-button"
        ],
        "bal-data-value": [
          "bal-button"
        ],
        "bal-hint": [
          "bal-button"
        ],
        "bal-snackbar": [
          "bal-button"
        ],
        "bal-tabs": [
          "bal-button"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-card/bal-card.tsx",
      "encapsulation": "none",
      "tag": "bal-card",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "border",
          "type": "boolean",
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "If `true` a light blue border is added to the card.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the color of the card.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flat",
          "type": "boolean",
          "mutable": false,
          "attr": "flat",
          "reflectToAttr": false,
          "docs": "If `true` the card loses its shadow.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flatMobile",
          "type": "boolean",
          "mutable": false,
          "attr": "flat-mobile",
          "reflectToAttr": false,
          "docs": "If `true` a card will not have a shadow on mobile.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the card background color becomes blue.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "padded",
          "type": "boolean",
          "mutable": false,
          "attr": "padded",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "If `true` the card has padding."
            }
          ],
          "default": "false",
          "deprecation": "If `true` the card has padding.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "padding",
          "type": "\"\" | \"form\" | \"pure\"",
          "mutable": false,
          "attr": "padding",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Defines the size of the padding grid"
            }
          ],
          "default": "''",
          "deprecation": "Defines the size of the padding grid",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "form",
              "type": "string"
            },
            {
              "value": "pure",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spacing",
          "type": "\"\" | \"large\" | \"medium\" | \"none\" | \"small\"",
          "mutable": false,
          "attr": "spacing",
          "reflectToAttr": false,
          "docs": "Defines the size of the padding grid",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "square",
          "type": "boolean",
          "mutable": false,
          "attr": "square",
          "reflectToAttr": false,
          "docs": "If `true` the card loses its border radius.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "teaser",
          "type": "boolean",
          "mutable": false,
          "attr": "teaser",
          "reflectToAttr": false,
          "docs": "If `true` the card has a limited width on desktop.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-card"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-card-actions/bal-card-actions.tsx",
      "encapsulation": "none",
      "tag": "bal-card-actions",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "right",
          "type": "boolean",
          "mutable": false,
          "attr": "right",
          "reflectToAttr": false,
          "docs": "If `true` the buttons start form right to left.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-card-button/bal-card-button.tsx",
      "encapsulation": "none",
      "tag": "bal-card-button",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot interact with the button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string | undefined",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the URL of the page the link goes to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Name of the icon like `edit`.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "Name of the right button icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "If `true` the label is hidden and a loading spinner is shown instead.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of button.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-card-button": [
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon",
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-card-content/bal-card-content.tsx",
      "encapsulation": "none",
      "tag": "bal-card-content",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the card text color becomes white.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-card-content"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-card-head/bal-card-head.tsx",
      "encapsulation": "none",
      "tag": "bal-card-head",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-card-heading/bal-card-heading.tsx",
      "encapsulation": "none",
      "tag": "bal-card-heading",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-card-steps/bal-card-steps.tsx",
      "encapsulation": "none",
      "tag": "bal-card-steps",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-card-subtitle/bal-card-subtitle.tsx",
      "encapsulation": "none",
      "tag": "bal-card-subtitle",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the card text color becomes white.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-card-title/bal-card-title.tsx",
      "encapsulation": "none",
      "tag": "bal-card-title",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the card text color becomes white.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-checkbox/bal-checkbox.tsx",
      "encapsulation": "scoped",
      "tag": "bal-checkbox",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "balTabindex",
          "type": "number",
          "mutable": false,
          "attr": "bal-tabindex",
          "reflectToAttr": false,
          "docs": "The tabindex of the control.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "If `true`, the checkbox is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"checkbox\" | \"switch\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the layout of the checkbox button",
          "docsTags": [],
          "default": "'checkbox'",
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "switch",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true`, the control works on dark background.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the control.",
          "docsTags": [],
          "default": "'on'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets the focus on the checkbox input element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle loses focus.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checked property has changed.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle has focus.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-select"
      ],
      "dependencies": [
        "bal-text"
      ],
      "dependencyGraph": {
        "bal-checkbox": [
          "bal-text"
        ],
        "bal-select": [
          "bal-checkbox"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-data/bal-data.tsx",
      "encapsulation": "none",
      "tag": "bal-data",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "border",
          "type": "boolean",
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "If `true` a bottom border is added to the data-item.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "horizontal",
          "type": "boolean",
          "mutable": false,
          "attr": "horizontal",
          "reflectToAttr": false,
          "docs": "If `true` the data list is horizontal instead of vertical.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-data-item/bal-data-item.tsx",
      "encapsulation": "none",
      "tag": "bal-data-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the item gets a lighter font color.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-data-label/bal-data-label.tsx",
      "encapsulation": "none",
      "tag": "bal-data-label",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true` an asterix is added after the label.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-data-value/bal-data-value.tsx",
      "encapsulation": "none",
      "tag": "bal-data-value",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the button will get disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "editable",
          "type": "boolean",
          "mutable": false,
          "attr": "editable",
          "reflectToAttr": false,
          "docs": "If `true` a small button with a edit icon will be shown on the right.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the edit button loses focus.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the edit button has focus.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the edit button has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-button",
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-data-value": [
          "bal-button",
          "bal-icon"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon",
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-datepicker/bal-datepicker.tsx",
      "encapsulation": "scoped",
      "tag": "bal-datepicker",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowedDates",
          "type": "((datestring: string) => boolean) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Callback to determine which date in the datepicker should be selectable.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "((datestring: string) => boolean)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "balTabindex",
          "type": "number",
          "mutable": false,
          "attr": "bal-tabindex",
          "reflectToAttr": false,
          "docs": "The tabindex of the control.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeOnSelect",
          "type": "boolean",
          "mutable": false,
          "attr": "close-on-select",
          "reflectToAttr": false,
          "docs": "Closes the datepicker dropdown after selection",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultDate",
          "type": "null | string | undefined",
          "mutable": false,
          "attr": "default-date",
          "reflectToAttr": false,
          "docs": "The date to defines where the datepicker popup starts. The prop accepts ISO 8601 date strings (YYYY-MM-DD).",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the component is diabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the component uses the whole width.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "Set this to `true` when the component is placed on a dark background.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "\"de\" | \"en\" | \"fr\" | \"it\"",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "Define the locale of month and day names.",
          "docsTags": [],
          "default": "'en'",
          "values": [
            {
              "value": "de",
              "type": "string"
            },
            {
              "value": "en",
              "type": "string"
            },
            {
              "value": "fr",
              "type": "string"
            },
            {
              "value": "it",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string | undefined",
          "mutable": true,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum datetime allowed. Value must be a date string\nfollowing the\n[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\n`1996-12-19`. The format does not have to be specific to an exact\ndatetime. For example, the maximum could just be the year, such as `1994`.\nDefaults to the end of this year.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxYearProp",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-year",
          "reflectToAttr": false,
          "docs": "Latest year available for selection",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string | undefined",
          "mutable": true,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum datetime allowed. Value must be a date string\nfollowing the\n[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\nsuch as `1996-12-19`. The format does not have to be specific to an exact\ndatetime. For example, the minimum could just be the year, such as `1994`.\nDefaults to the beginning of the year, 100 years ago from today.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minYearProp",
          "type": "number | undefined",
          "mutable": false,
          "attr": "min-year",
          "reflectToAttr": false,
          "docs": "Earliest year available for selection",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The text to display when the select is empty.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true` the use can only select a date.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true` the attribute required is added to the native input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "triggerIcon",
          "type": "boolean",
          "mutable": false,
          "attr": "trigger-icon",
          "reflectToAttr": false,
          "docs": "If `true` the datepicker only open on click of the icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "null | string | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the form field, which accepts ISO 8601 date strings (YYYY-MM-DD).",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the dropdown",
          "docsTags": []
        },
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the dropdown",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "select(datestring: string) => Promise<void>",
          "parameters": [],
          "docs": "Selects an option",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets the focus on the input element",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "null | string | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a option got selected.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-dropdown",
        "bal-dropdown-trigger",
        "bal-dropdown-menu",
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-datepicker": [
          "bal-dropdown",
          "bal-dropdown-trigger",
          "bal-dropdown-menu",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-color/bal-doc-color.tsx",
      "encapsulation": "scoped",
      "tag": "bal-doc-color",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "background",
          "type": "boolean",
          "mutable": false,
          "attr": "background",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scssVars",
          "type": "string",
          "mutable": false,
          "attr": "scss-vars",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subject",
          "type": "string",
          "mutable": false,
          "attr": "subject",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Primary'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/docs/bal-doc-download/bal-doc-download.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-download",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "iconLeft",
          "type": "string",
          "mutable": false,
          "attr": "icon-left",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'document'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'download'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "link",
          "type": "string",
          "mutable": false,
          "attr": "link",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subject",
          "type": "string",
          "mutable": false,
          "attr": "subject",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subtitle",
          "type": "string",
          "mutable": false,
          "attr": "subtitle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-card",
        "bal-card-content",
        "bal-list",
        "bal-list-item",
        "bal-list-item-icon",
        "bal-icon",
        "bal-list-item-content",
        "bal-list-item-title",
        "bal-list-item-subtitle"
      ],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-card",
          "bal-card-content",
          "bal-list",
          "bal-list-item",
          "bal-list-item-icon",
          "bal-icon",
          "bal-list-item-content",
          "bal-list-item-title",
          "bal-list-item-subtitle"
        ],
        "bal-list-item-title": [
          "bal-text"
        ],
        "bal-list-item-subtitle": [
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-icons/bal-doc-icons.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-icons",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "icons",
          "type": "string",
          "mutable": false,
          "attr": "icons",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-doc-icons": [
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/docs/bal-doc-image/bal-doc-image.tsx",
      "encapsulation": "none",
      "tag": "bal-doc-image",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "src",
          "type": "string",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-dropdown/bal-dropdown.tsx",
      "encapsulation": "none",
      "tag": "bal-dropdown",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the field spans over the whole width.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fixedContentWidth",
          "type": "boolean",
          "mutable": false,
          "attr": "fixed-content-width",
          "reflectToAttr": false,
          "docs": "If `true` the dropdown content has a fixed width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isActive",
          "type": "boolean",
          "mutable": true,
          "attr": "is-active",
          "reflectToAttr": true,
          "docs": "If `true` the dropdown content is open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the dropdown menu.",
          "docsTags": []
        },
        {
          "name": "getContentElement",
          "returns": {
            "type": "Promise<HTMLElement | null>",
            "docs": ""
          },
          "signature": "getContentElement() => Promise<HTMLElement | null>",
          "parameters": [],
          "docs": "Returns the `HTMLDivElement` of the content element",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Open the dropdown menu.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Open or closes the dropdown.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balCollapse",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Listen when the dropdown opens or closes. Returns the current `isActive` value.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "balDropdownPrepare",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "scroll",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-datepicker",
        "bal-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-datepicker": [
          "bal-dropdown"
        ],
        "bal-select": [
          "bal-dropdown"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-dropdown-menu/bal-dropdown-menu.tsx",
      "encapsulation": "none",
      "tag": "bal-dropdown-menu",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "scrollable",
          "type": "number",
          "mutable": false,
          "attr": "scrollable",
          "reflectToAttr": false,
          "docs": "Limit the height of the dropdown content. Pass the amount of pixel.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-datepicker",
        "bal-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-datepicker": [
          "bal-dropdown-menu"
        ],
        "bal-select": [
          "bal-dropdown-menu"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-dropdown-trigger/bal-dropdown-trigger.tsx",
      "encapsulation": "none",
      "tag": "bal-dropdown-trigger",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-datepicker",
        "bal-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-datepicker": [
          "bal-dropdown-trigger"
        ],
        "bal-select": [
          "bal-dropdown-trigger"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-field/bal-field.tsx",
      "encapsulation": "none",
      "tag": "bal-field",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the field loses opacity",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the component takes the whole width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "If `true` the component gets a invalid style. Only use this if there is no live validation.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the field can be used on blue background.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "If `true` a loading spinner is visible at the end of the input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-field-control/bal-field-control.tsx",
      "encapsulation": "scoped",
      "tag": "bal-field-control",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "iconLeft",
          "type": "string",
          "mutable": false,
          "attr": "icon-left",
          "reflectToAttr": false,
          "docs": "Baloise icon for the left side of the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "Baloise icon for the right side of the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the field can be used on blue background.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "If `true` a loading spinner is visible at the end of the input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-field-control": [
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-field-hint/bal-field-hint.tsx",
      "encapsulation": "scoped",
      "tag": "bal-field-hint",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "subject",
          "type": "string",
          "mutable": false,
          "attr": "subject",
          "reflectToAttr": false,
          "docs": "Text of the inputs label",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-hint",
        "bal-hint-title",
        "bal-hint-text"
      ],
      "dependencyGraph": {
        "bal-field-hint": [
          "bal-hint",
          "bal-hint-title",
          "bal-hint-text"
        ],
        "bal-hint": [
          "bal-icon",
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon",
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-field-label/bal-field-label.tsx",
      "encapsulation": "scoped",
      "tag": "bal-field-label",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the component takes the whole width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true` a asterix (*) is added to the label text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-field-message/bal-field-message.tsx",
      "encapsulation": "none",
      "tag": "bal-field-message",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the color of the message.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the component takes the whole width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-file-upload/bal-file-upload.tsx",
      "encapsulation": "scoped",
      "tag": "bal-file-upload",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string",
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "Accepted MIME-Types like `image/png,image/jpeg`.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the button is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the drop area.",
          "docsTags": [],
          "default": "'Choose or drop a file...'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxBundleSize",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-bundle-size",
          "reflectToAttr": false,
          "docs": "Allowed max bundle size in bytes.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxFileSize",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-file-size",
          "reflectToAttr": false,
          "docs": "Allowed max file size in bytes.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxFiles",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-files",
          "reflectToAttr": false,
          "docs": "Allowed number of files in the bundle.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If `true` multiple file upload is possible.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subTitle",
          "type": "((file: File) => string) | undefined",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Overrides the default subtitle filesize",
          "docsTags": [],
          "values": [
            {
              "type": "((file: File) => string)"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "File[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Input value.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "File[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "clear",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "clear() => Promise<void>",
          "parameters": [],
          "docs": "Sets the file list to an empty list",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balChange",
          "detail": "File[]",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when a file is added or removed.",
          "docsTags": []
        },
        {
          "event": "balRejectedFile",
          "detail": "FileUploadRejectedFile",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when a file is rejected due to not allowed MIME-Type and so on.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "dragenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "dragover",
          "capture": false,
          "passive": true
        },
        {
          "event": "dragleave",
          "capture": false,
          "passive": true
        },
        {
          "event": "drop",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-icon",
        "bal-list",
        "bal-list-item",
        "bal-list-item-icon",
        "bal-list-item-content",
        "bal-list-item-title",
        "bal-list-item-subtitle"
      ],
      "dependencyGraph": {
        "bal-file-upload": [
          "bal-icon",
          "bal-list",
          "bal-list-item",
          "bal-list-item-icon",
          "bal-list-item-content",
          "bal-list-item-title",
          "bal-list-item-subtitle"
        ],
        "bal-list-item-title": [
          "bal-text"
        ],
        "bal-list-item-subtitle": [
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-footer/bal-footer.tsx",
      "encapsulation": "scoped",
      "tag": "bal-footer",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "hasTrackLine",
          "type": "boolean",
          "mutable": false,
          "attr": "has-track-line",
          "reflectToAttr": false,
          "docs": "If `true` the footer shows a track line at the bottom.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideLinks",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-links",
          "reflectToAttr": false,
          "docs": "If `true` the default Baloise links will be hidden.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "\"de\" | \"en\" | \"fr\" | \"it\"",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "The languages in which the links will appear.",
          "docsTags": [],
          "default": "'en'",
          "values": [
            {
              "value": "de",
              "type": "string"
            },
            {
              "value": "en",
              "type": "string"
            },
            {
              "value": "fr",
              "type": "string"
            },
            {
              "value": "it",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-heading/bal-heading.tsx",
      "encapsulation": "none",
      "tag": "bal-heading",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The theme type of the toast. Given by bulma our css framework.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the button is inverted",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "level",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "mutable": false,
          "attr": "level",
          "reflectToAttr": false,
          "docs": "The actual heading level used in the HTML markup.",
          "docsTags": [],
          "default": "'h1'",
          "values": [
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            },
            {
              "value": "h6",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "space",
          "type": "\"all\" | \"bottom\" | \"none\" | \"top\"",
          "mutable": false,
          "attr": "space",
          "reflectToAttr": false,
          "docs": "Defines at which position the heading has spacing.",
          "docsTags": [],
          "default": "'all'",
          "values": [
            {
              "value": "all",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spaced",
          "type": "boolean",
          "mutable": false,
          "attr": "spaced",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "If 'false' the margin of the heading gets dropped."
            }
          ],
          "default": "true",
          "deprecation": "If 'false' the margin of the heading gets dropped.",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subtitle",
          "type": "boolean",
          "mutable": false,
          "attr": "subtitle",
          "reflectToAttr": false,
          "docs": "If `true` the heading gets displayed slimmer.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visualLevel",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | undefined",
          "mutable": false,
          "attr": "visual-level",
          "reflectToAttr": false,
          "docs": "Make the visual style mimic a specific heading level.\nThis option allows you to make e.g. h1 visually look like h3,\nbut still keep it h1 in the markup.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            },
            {
              "value": "h6",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-snackbar"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-snackbar": [
          "bal-heading"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-hint/bal-hint.tsx",
      "encapsulation": "scoped",
      "tag": "bal-hint",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeLabel",
          "type": "string",
          "mutable": false,
          "attr": "close-label",
          "reflectToAttr": false,
          "docs": "Text for the close button.",
          "docsTags": [],
          "default": "'Close'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the hint box.",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the hint box.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Toggles the hint box.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "keyup",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "scroll",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-field-hint"
      ],
      "dependencies": [
        "bal-icon",
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-hint": [
          "bal-icon",
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon",
          "bal-text"
        ],
        "bal-field-hint": [
          "bal-hint"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-hint-text/bal-hint-text.tsx",
      "encapsulation": "scoped",
      "tag": "bal-hint-text",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-field-hint"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-field-hint": [
          "bal-hint-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-hint-title/bal-hint-title.tsx",
      "encapsulation": "scoped",
      "tag": "bal-hint-title",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-field-hint"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-field-hint": [
          "bal-hint-title"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-icon/bal-icon.tsx",
      "encapsulation": "scoped",
      "tag": "bal-icon",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"info\" | \"info-light\" | \"link\" | \"primary\" | \"primary-light\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The theme type of the button. Given by bulma our css framework.",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "info-light",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "primary-light",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the button is inverted",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the baloise icon.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rotate",
          "type": "boolean",
          "mutable": false,
          "attr": "rotate",
          "reflectToAttr": false,
          "docs": "If `true` the icon rotates like for a loading spinner",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"large\" | \"medium\" | \"small\" | \"xsmall\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Defines the size of the icon.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "xsmall",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "svg",
          "type": "string",
          "mutable": false,
          "attr": "svg",
          "reflectToAttr": false,
          "docs": "Svg content.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "turn",
          "type": "boolean",
          "mutable": false,
          "attr": "turn",
          "reflectToAttr": false,
          "docs": "If `true` the icon is rotated 180deg",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-button",
        "bal-data-value",
        "bal-datepicker",
        "bal-doc-download",
        "bal-doc-icons",
        "bal-field-control",
        "bal-file-upload",
        "bal-hint",
        "bal-pagination",
        "bal-select",
        "bal-snackbar",
        "bal-toast"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-button": [
          "bal-icon"
        ],
        "bal-data-value": [
          "bal-icon"
        ],
        "bal-datepicker": [
          "bal-icon"
        ],
        "bal-doc-download": [
          "bal-icon"
        ],
        "bal-doc-icons": [
          "bal-icon"
        ],
        "bal-field-control": [
          "bal-icon"
        ],
        "bal-file-upload": [
          "bal-icon"
        ],
        "bal-hint": [
          "bal-icon"
        ],
        "bal-pagination": [
          "bal-icon"
        ],
        "bal-select": [
          "bal-icon"
        ],
        "bal-snackbar": [
          "bal-icon"
        ],
        "bal-toast": [
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-input/bal-input.tsx",
      "encapsulation": "scoped",
      "tag": "bal-input",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string | undefined",
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `\"file\"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autoComplete",
          "type": "boolean",
          "mutable": false,
          "attr": "auto-complete",
          "reflectToAttr": false,
          "docs": "The autocomplete attribute specifies whether or not an input field should have autocomplete enabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "\"email\" | \"tel\" | \"url\" | \"off\" | \"on\" | \"name\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"photo\"",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Indicates whether the value of the control can be automatically completed by the browser.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            },
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "honorific-prefix",
              "type": "string"
            },
            {
              "value": "given-name",
              "type": "string"
            },
            {
              "value": "additional-name",
              "type": "string"
            },
            {
              "value": "family-name",
              "type": "string"
            },
            {
              "value": "honorific-suffix",
              "type": "string"
            },
            {
              "value": "nickname",
              "type": "string"
            },
            {
              "value": "username",
              "type": "string"
            },
            {
              "value": "new-password",
              "type": "string"
            },
            {
              "value": "current-password",
              "type": "string"
            },
            {
              "value": "one-time-code",
              "type": "string"
            },
            {
              "value": "organization-title",
              "type": "string"
            },
            {
              "value": "organization",
              "type": "string"
            },
            {
              "value": "street-address",
              "type": "string"
            },
            {
              "value": "address-line1",
              "type": "string"
            },
            {
              "value": "address-line2",
              "type": "string"
            },
            {
              "value": "address-line3",
              "type": "string"
            },
            {
              "value": "address-level4",
              "type": "string"
            },
            {
              "value": "address-level3",
              "type": "string"
            },
            {
              "value": "address-level2",
              "type": "string"
            },
            {
              "value": "address-level1",
              "type": "string"
            },
            {
              "value": "country",
              "type": "string"
            },
            {
              "value": "country-name",
              "type": "string"
            },
            {
              "value": "postal-code",
              "type": "string"
            },
            {
              "value": "cc-name",
              "type": "string"
            },
            {
              "value": "cc-given-name",
              "type": "string"
            },
            {
              "value": "cc-additional-name",
              "type": "string"
            },
            {
              "value": "cc-family-name",
              "type": "string"
            },
            {
              "value": "cc-number",
              "type": "string"
            },
            {
              "value": "cc-exp",
              "type": "string"
            },
            {
              "value": "cc-exp-month",
              "type": "string"
            },
            {
              "value": "cc-exp-year",
              "type": "string"
            },
            {
              "value": "cc-csc",
              "type": "string"
            },
            {
              "value": "cc-type",
              "type": "string"
            },
            {
              "value": "transaction-currency",
              "type": "string"
            },
            {
              "value": "transaction-amount",
              "type": "string"
            },
            {
              "value": "language",
              "type": "string"
            },
            {
              "value": "bday",
              "type": "string"
            },
            {
              "value": "bday-day",
              "type": "string"
            },
            {
              "value": "bday-month",
              "type": "string"
            },
            {
              "value": "bday-year",
              "type": "string"
            },
            {
              "value": "sex",
              "type": "string"
            },
            {
              "value": "tel-country-code",
              "type": "string"
            },
            {
              "value": "tel-national",
              "type": "string"
            },
            {
              "value": "tel-area-code",
              "type": "string"
            },
            {
              "value": "tel-local",
              "type": "string"
            },
            {
              "value": "tel-extension",
              "type": "string"
            },
            {
              "value": "impp",
              "type": "string"
            },
            {
              "value": "photo",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocorrect",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "Whether auto correction should be enabled when the user is entering/editing the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "balTabindex",
          "type": "number",
          "mutable": false,
          "attr": "bal-tabindex",
          "reflectToAttr": false,
          "docs": "The tabindex of the control.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clickable",
          "type": "boolean",
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "If `true` the input gets a clickable cursor style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "decimal",
          "type": "number | undefined",
          "mutable": false,
          "attr": "decimal",
          "reflectToAttr": false,
          "docs": "Defins the allowed decimal points for the `number-input`.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` this component can be placed on dark background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string | undefined",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum value, which must not be less than its minimum (min attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": false,
          "docs": "Defines the max length of the value.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string | undefined",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum value, which must not be greater than its maximum (max attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minLength",
          "type": "number | undefined",
          "mutable": false,
          "attr": "min-length",
          "reflectToAttr": false,
          "docs": "Defines the min length of the value.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `\"email\"` or `\"file\"`, otherwise it is ignored.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberInput",
          "type": "boolean",
          "mutable": false,
          "attr": "number-input",
          "reflectToAttr": false,
          "docs": "If `true` on mobile device the number keypad is active",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string | undefined",
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"date\"`, or `\"password\"`, otherwise it is ignored. When the type attribute is `\"date\"`, `pattern` will only be used in browsers that do not support the `\"date\"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "null | string | undefined",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Instructional text that shows before the input has a value.",
          "docsTags": [],
          "values": [
            {
              "type": "null"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "If `true`, the element will have its spelling and grammar checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "suffix",
          "type": "string | undefined",
          "mutable": false,
          "attr": "suffix",
          "reflectToAttr": false,
          "docs": "Adds a suffix the the inputvalue after blur.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"checkbox\" | \"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"image\" | \"month\" | \"number\" | \"password\" | \"radio\" | \"range\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Defines the type of the input (text, number, email ...).",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "color",
              "type": "string"
            },
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime-local",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "image",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            },
            {
              "value": "range",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `bal-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "null | number | string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has changed.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "null | number | string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balKeyPress",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard key has pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-list/bal-list.tsx",
      "encapsulation": "none",
      "tag": "bal-list",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "border",
          "type": "boolean",
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "If `true` each list item has a bottom border",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the list item can be hovered",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the list can be used on a dark backround",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-list"
        ],
        "bal-file-upload": [
          "bal-list"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list-item/bal-list-item.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "clickable",
          "type": "boolean",
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "If `true` the list item shows that it is clickable",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the list item can be hovered",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Specifies the URL of the page the link goes to",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "If `true` the list item has a selected theme",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\" _parent\" | \"_blank\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to open the linked document",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "value": " _parent",
              "type": "string"
            },
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balNavigate",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link element has clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-list-item"
        ],
        "bal-file-upload": [
          "bal-list-item"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list-item-content/bal-list-item-content.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item-content",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-list-item-content"
        ],
        "bal-file-upload": [
          "bal-list-item-content"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list-item-icon/bal-list-item-icon.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item-icon",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "right",
          "type": "boolean",
          "mutable": false,
          "attr": "right",
          "reflectToAttr": false,
          "docs": "If `true` the icon is on the right side of the list item. Default is the left side.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-doc-download": [
          "bal-list-item-icon"
        ],
        "bal-file-upload": [
          "bal-list-item-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list-item-subtitle/bal-list-item-subtitle.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item-subtitle",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload"
      ],
      "dependencies": [
        "bal-text"
      ],
      "dependencyGraph": {
        "bal-list-item-subtitle": [
          "bal-text"
        ],
        "bal-doc-download": [
          "bal-list-item-subtitle"
        ],
        "bal-file-upload": [
          "bal-list-item-subtitle"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-list-item-title/bal-list-item-title.tsx",
      "encapsulation": "none",
      "tag": "bal-list-item-title",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-doc-download",
        "bal-file-upload"
      ],
      "dependencies": [
        "bal-text"
      ],
      "dependencyGraph": {
        "bal-list-item-title": [
          "bal-text"
        ],
        "bal-doc-download": [
          "bal-list-item-title"
        ],
        "bal-file-upload": [
          "bal-list-item-title"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-modal/bal-modal.tsx",
      "encapsulation": "scoped",
      "tag": "bal-modal",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "component",
          "type": "Function | HTMLElement | null | string",
          "mutable": false,
          "attr": "component",
          "reflectToAttr": false,
          "docs": "The component to display inside of the modal.",
          "docsTags": [],
          "values": [
            {
              "type": "Function"
            },
            {
              "type": "HTMLElement"
            },
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "componentProps",
          "type": "undefined | { [key: string]: any; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The data to pass to the modal component.",
          "docsTags": [],
          "values": [
            {
              "type": "undefined"
            },
            {
              "type": "{ [key: string]: any; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "cssClass",
          "type": "string | string[] | undefined",
          "mutable": false,
          "attr": "css-class",
          "reflectToAttr": false,
          "docs": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hasBackdrop",
          "type": "boolean",
          "mutable": false,
          "attr": "has-backdrop",
          "reflectToAttr": false,
          "docs": "If `true`, a backdrop will be displayed behind the modal.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"card\" | \"light\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the look of the modal. The card interface should be used for scrollable content in the modal.",
          "docsTags": [],
          "default": "'light'",
          "values": [
            {
              "value": "card",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isClosable",
          "type": "boolean",
          "mutable": false,
          "attr": "is-closable",
          "reflectToAttr": false,
          "docs": "If `true`, the modal can be closed with the escape key or the little close button.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "modalWidth",
          "type": "number",
          "mutable": false,
          "attr": "modal-width",
          "reflectToAttr": false,
          "docs": "Defines the width of the modal body",
          "docsTags": [],
          "default": "640",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the modal.",
          "docsTags": []
        },
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "dismiss(data?: any, role?: string | undefined) => Promise<boolean>",
          "parameters": [],
          "docs": "Closes the presented modal with the modal controller",
          "docsTags": []
        },
        {
          "name": "onDidDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "signature": "onDidDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "Returns a promise that resolves when the modal did dismiss.",
          "docsTags": []
        },
        {
          "name": "onWillDismiss",
          "returns": {
            "type": "Promise<OverlayEventDetail<T>>",
            "docs": ""
          },
          "signature": "onWillDismiss<T = any>() => Promise<OverlayEventDetail<T>>",
          "parameters": [],
          "docs": "Returns a promise that resolves when the modal will dismiss.",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the modal.",
          "docsTags": []
        },
        {
          "name": "present",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "present() => Promise<void>",
          "parameters": [],
          "docs": "Presents the modal through the modal controller",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balModalDidDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the modal has dismissed.",
          "docsTags": []
        },
        {
          "event": "balModalDidPresent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the modal has presented.",
          "docsTags": []
        },
        {
          "event": "balModalWillDismiss",
          "detail": "OverlayEventDetail<any>",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted before the modal has dismissed.",
          "docsTags": []
        },
        {
          "event": "balModalWillPresent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted before the modal has presented.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-modal-actions/bal-modal-actions.tsx",
      "encapsulation": "scoped",
      "tag": "bal-modal-actions",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-modal-body/bal-modal-body.tsx",
      "encapsulation": "none",
      "tag": "bal-modal-body",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-modal-footer/bal-modal-footer.tsx",
      "encapsulation": "none",
      "tag": "bal-modal-footer",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-modal-header/bal-modal-header.tsx",
      "encapsulation": "none",
      "tag": "bal-modal-header",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navbar/bal-navbar.tsx",
      "encapsulation": "none",
      "tag": "bal-navbar",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "It `true` the component uses the whole width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "light",
          "type": "boolean",
          "mutable": false,
          "attr": "light",
          "reflectToAttr": false,
          "docs": "It `true` the navbar has a white background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noBurger",
          "type": "boolean",
          "mutable": false,
          "attr": "no-burger",
          "reflectToAttr": false,
          "docs": "It `true` the burger button is hidden",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navbar-brand/bal-navbar-brand.tsx",
      "encapsulation": "none",
      "tag": "bal-navbar-brand",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Link of the logo / title.",
          "docsTags": [],
          "default": "'/'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balNavigate",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link element has clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navbar-menu/bal-navbar-menu.tsx",
      "encapsulation": "none",
      "tag": "bal-navbar-menu",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navbar-menu-end/bal-navbar-menu-end.tsx",
      "encapsulation": "none",
      "tag": "bal-navbar-menu-end",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-navbar-menu-start/bal-navbar-menu-start.tsx",
      "encapsulation": "none",
      "tag": "bal-navbar-menu-start",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-notification/bal-notification.tsx",
      "encapsulation": "scoped",
      "tag": "bal-notification",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the color of the element",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-pagination/bal-pagination.tsx",
      "encapsulation": "scoped",
      "tag": "bal-pagination",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageRange",
          "type": "number",
          "mutable": false,
          "attr": "page-range",
          "reflectToAttr": false,
          "docs": "Specify the max visible pages before and after the selected page",
          "docsTags": [],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "mutable": false,
          "attr": "total-pages",
          "reflectToAttr": false,
          "docs": "The total amount of pages",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Current selected page",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "next",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "next() => Promise<void>",
          "parameters": [],
          "docs": "Go to the next page",
          "docsTags": []
        },
        {
          "name": "previous",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "previous() => Promise<void>",
          "parameters": [],
          "docs": "Go to the prvious page",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balChange",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when a page change happens",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-text",
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-pagination": [
          "bal-text",
          "bal-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-radio/bal-radio.tsx",
      "encapsulation": "scoped",
      "tag": "bal-radio",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "balTabindex",
          "type": "number",
          "mutable": false,
          "attr": "bal-tabindex",
          "reflectToAttr": false,
          "docs": "The tabindex of the control.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "If `true`, the radio is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"radio\" | \"select-button\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the layout of the radio button",
          "docsTags": [],
          "default": "'radio'",
          "values": [
            {
              "value": "radio",
              "type": "string"
            },
            {
              "value": "select-button",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true`, the control works on dark background.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isEmpty",
          "type": "boolean",
          "mutable": false,
          "attr": "is-empty",
          "reflectToAttr": false,
          "docs": "If `true` the radio has no label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the control.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets the focus on the input element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle loses focus.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the toggle has focus.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-text"
      ],
      "dependencyGraph": {
        "bal-radio": [
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-radio-group/bal-radio-group.tsx",
      "encapsulation": "scoped",
      "tag": "bal-radio-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean | undefined",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the radios.",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"radio\" | \"select-button\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the layout of the radio button",
          "docsTags": [],
          "default": "'radio'",
          "values": [
            {
              "value": "radio",
              "type": "string"
            },
            {
              "value": "select-button",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the component can be used on dark background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the control.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checked property has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-select/bal-select.tsx",
      "encapsulation": "scoped",
      "tag": "bal-select",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "balTabindex",
          "type": "number",
          "mutable": false,
          "attr": "bal-tabindex",
          "reflectToAttr": false,
          "docs": "The tabindex of the control.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the component is diabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the component uses the whole width.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasMovement",
          "type": "boolean",
          "mutable": false,
          "attr": "has-movement",
          "reflectToAttr": false,
          "docs": "Enables the slide in animation for the option items.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "Set this to `true` when the component is placed on a dark background.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Defines if the select is in a loading state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If `true` multiple option can be selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noBorder",
          "type": "boolean",
          "mutable": false,
          "attr": "no-border",
          "reflectToAttr": false,
          "docs": "Removes the border of the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noDataLabel",
          "type": "string | undefined",
          "mutable": false,
          "attr": "no-data-label",
          "reflectToAttr": false,
          "docs": "This label is shown if typeahead is active and all the options are filtered out.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The text to display when the select is empty.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scrollable",
          "type": "number",
          "mutable": false,
          "attr": "scrollable",
          "reflectToAttr": false,
          "docs": "Defines the height of the dropdown list.",
          "docsTags": [],
          "default": "250",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "typeahead",
          "type": "boolean",
          "mutable": false,
          "attr": "typeahead",
          "reflectToAttr": false,
          "docs": "If `true` the user can search by typing into the input field.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | string[] | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Selected option values. Could also be passed as a string, which gets transformed.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "cancel",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "cancel() => Promise<void>",
          "parameters": [],
          "docs": "Cancel the dropdown",
          "docsTags": []
        },
        {
          "name": "clear",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "clear() => Promise<void>",
          "parameters": [],
          "docs": "Sets the value to `[]`, the input value to ´''´ and the focus index to ´0´.",
          "docsTags": []
        },
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the dropdown",
          "docsTags": []
        },
        {
          "name": "getValue",
          "returns": {
            "type": "Promise<string[] | undefined>",
            "docs": ""
          },
          "signature": "getValue() => Promise<string[] | undefined>",
          "parameters": [],
          "docs": "Sets the focus on the input element",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the dropdown",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "select(value: string) => Promise<void>",
          "parameters": [],
          "docs": "Select option by passed value",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets the focus on the input element",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "balCancel",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the user cancels the input.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "string | string[] | undefined",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a option got selected.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input got clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balKeyPress",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus and key from the keyboard go hit.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-tag",
        "bal-dropdown",
        "bal-dropdown-trigger",
        "bal-icon",
        "bal-dropdown-menu",
        "bal-checkbox"
      ],
      "dependencyGraph": {
        "bal-select": [
          "bal-tag",
          "bal-dropdown",
          "bal-dropdown-trigger",
          "bal-icon",
          "bal-dropdown-menu",
          "bal-checkbox"
        ],
        "bal-tag": [
          "bal-text"
        ],
        "bal-checkbox": [
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-select-option/bal-select-option.tsx",
      "encapsulation": "none",
      "tag": "bal-select-option",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the option.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string | undefined",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label will be shown in the input element when it got selected",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the select option. This value will be returned by the parent `<bal-select>` element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-sheet/bal-sheet.tsx",
      "encapsulation": "none",
      "tag": "bal-sheet",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-slider/bal-slider.tsx",
      "encapsulation": "scoped",
      "tag": "bal-slider",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "balTabindex",
          "type": "number",
          "mutable": false,
          "attr": "bal-tabindex",
          "reflectToAttr": false,
          "docs": "The tabindex of the control.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `balChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasTicks",
          "type": "boolean",
          "mutable": false,
          "attr": "has-ticks",
          "reflectToAttr": false,
          "docs": "If `true`, small ticks for the steps are shown.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Max value of the model.",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Min value of the model.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "The step size. 0 means no steps.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `bal-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "null | number | string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has changed.",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "null | number | string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balKeyPress",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard key has pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-snackbar/bal-snackbar.tsx",
      "encapsulation": "scoped",
      "tag": "bal-snackbar",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "action",
          "type": "string",
          "mutable": false,
          "attr": "action",
          "reflectToAttr": false,
          "docs": "Label text for the action button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The theme type of the snackbar. Given by bulma our css framework.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "The duration of the snackbar",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The icon of the snackbar header",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "message",
          "type": "string",
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "The message of the snackbar",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subject",
          "type": "string",
          "mutable": false,
          "attr": "subject",
          "reflectToAttr": false,
          "docs": "The subject of the snackbar header",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes this snackbar",
          "docsTags": []
        },
        {
          "name": "closeIn",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "closeIn(duration: number) => Promise<void>",
          "parameters": [],
          "docs": "Closes the snackbar after the given duration in ms",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balAction",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the action button is clicked",
          "docsTags": []
        },
        {
          "event": "balClose",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when snackbar is closed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-icon",
        "bal-heading",
        "bal-text",
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-snackbar": [
          "bal-icon",
          "bal-heading",
          "bal-text",
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon",
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-spinner/bal-spinner.tsx",
      "encapsulation": "scoped",
      "tag": "bal-spinner",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the component can be used on dark background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "small",
          "type": "boolean",
          "mutable": false,
          "attr": "small",
          "reflectToAttr": false,
          "docs": "If `true` the component is smaller",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-button": [
          "bal-spinner"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-tab-item/bal-tab-item.tsx",
      "encapsulation": "scoped",
      "tag": "bal-tab-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "Tell's if the tab is active and the content is visible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "bubble",
          "type": "boolean",
          "mutable": false,
          "attr": "bubble",
          "reflectToAttr": false,
          "docs": "If `true` a small red bubble is added to the tab.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the tab is disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "done",
          "type": "boolean",
          "mutable": false,
          "attr": "done",
          "reflectToAttr": false,
          "docs": "If `true` the step is marked as done.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "failed",
          "type": "boolean",
          "mutable": false,
          "attr": "failed",
          "reflectToAttr": false,
          "docs": "If `true` the step is marked as failed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Link to path.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for the tab.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "prevent",
          "type": "boolean",
          "mutable": false,
          "attr": "prevent",
          "reflectToAttr": false,
          "docs": "Tell's if the linking is done by a router.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "This is the key of the tab.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getOptions",
          "returns": {
            "type": "Promise<BalTabOption>",
            "docs": ""
          },
          "signature": "getOptions() => Promise<BalTabOption>",
          "parameters": [],
          "docs": "Options of the tab like label, value etc.",
          "docsTags": []
        },
        {
          "name": "setActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setActive(active: boolean) => Promise<void>",
          "parameters": [],
          "docs": "Sets the tab active.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balNavigate",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the link element has clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-table/bal-table.tsx",
      "encapsulation": "none",
      "tag": "bal-table",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the table has a full width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-tabs/bal-tabs.tsx",
      "encapsulation": "scoped",
      "tag": "bal-tabs",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "action",
          "type": "boolean",
          "mutable": false,
          "attr": "action",
          "reflectToAttr": false,
          "docs": "If `true` a acation button is added to the right",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "actionLabel",
          "type": "string",
          "mutable": false,
          "attr": "action-label",
          "reflectToAttr": false,
          "docs": "Label for the action button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clickable",
          "type": "boolean",
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "If `true` the tabs or steps can be clicked.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "If `true` the field expands over the whole width.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interface",
          "type": "\"o-steps\" | \"steps\" | \"tabs\"",
          "mutable": false,
          "attr": "interface",
          "reflectToAttr": false,
          "docs": "Defines the layout of the tabs.",
          "docsTags": [],
          "default": "'tabs'",
          "values": [
            {
              "value": "o-steps",
              "type": "string"
            },
            {
              "value": "steps",
              "type": "string"
            },
            {
              "value": "tabs",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": false,
          "docs": "If you want the rounded tab style.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "select(tab: BalTabOption) => Promise<void>",
          "parameters": [],
          "docs": "Go to tab with the given value",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balActionClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the action button has clicked",
          "docsTags": []
        },
        {
          "event": "balTabChange",
          "detail": "BalTabOption",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the changes has finished.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-button"
      ],
      "dependencyGraph": {
        "bal-tabs": [
          "bal-button"
        ],
        "bal-button": [
          "bal-spinner",
          "bal-icon",
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-tag/bal-tag.tsx",
      "encapsulation": "none",
      "tag": "bal-tag",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "The theme type of the tag. Given by bulma our css framework.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The theme type of the tag. Given by bulma our css framework.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"\" | \"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the tag element",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balCloseClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input got clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-select"
      ],
      "dependencies": [
        "bal-text"
      ],
      "dependencyGraph": {
        "bal-tag": [
          "bal-text"
        ],
        "bal-select": [
          "bal-tag"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-text/bal-text.tsx",
      "encapsulation": "none",
      "tag": "bal-text",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bold",
          "type": "boolean",
          "mutable": false,
          "attr": "bold",
          "reflectToAttr": false,
          "docs": "If `true` the text is bold",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"hint\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the color of the text.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "hint",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "small",
          "type": "boolean",
          "mutable": false,
          "attr": "small",
          "reflectToAttr": false,
          "docs": "If `true` the text has a small size",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "bal-button",
        "bal-checkbox",
        "bal-list-item-subtitle",
        "bal-list-item-title",
        "bal-pagination",
        "bal-radio",
        "bal-snackbar",
        "bal-tag",
        "bal-toast"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "bal-button": [
          "bal-text"
        ],
        "bal-checkbox": [
          "bal-text"
        ],
        "bal-list-item-subtitle": [
          "bal-text"
        ],
        "bal-list-item-title": [
          "bal-text"
        ],
        "bal-pagination": [
          "bal-text"
        ],
        "bal-radio": [
          "bal-text"
        ],
        "bal-snackbar": [
          "bal-text"
        ],
        "bal-tag": [
          "bal-text"
        ],
        "bal-toast": [
          "bal-text"
        ]
      }
    },
    {
      "filePath": "./src/components/bal-textarea/bal-textarea.tsx",
      "encapsulation": "scoped",
      "tag": "bal-textarea",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "balTabindex",
          "type": "number",
          "mutable": false,
          "attr": "bal-tabindex",
          "reflectToAttr": false,
          "docs": "The tabindex of the control.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clickable",
          "type": "boolean",
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "If `true` the input gets a clickable cursor style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cols",
          "type": "number | undefined",
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the textarea.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` this component can be placed on dark background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number | undefined",
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minLength",
          "type": "number | undefined",
          "mutable": false,
          "attr": "min-length",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string | undefined",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Instructional text that shows before the input has a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number | undefined",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "The number of visible text lines for the control.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string | undefined",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the textarea.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "wrap",
          "type": "\"hard\" | \"off\" | \"soft\" | undefined",
          "mutable": false,
          "attr": "wrap",
          "reflectToAttr": false,
          "docs": "Indicates how the control wraps text.",
          "docsTags": [],
          "values": [
            {
              "value": "hard",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "soft",
              "type": "string"
            },
            {
              "type": "undefined"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLTextAreaElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLTextAreaElement>",
          "parameters": [],
          "docs": "Returns the native `<textarea>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\n`textarea.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has changed..",
          "docsTags": []
        },
        {
          "event": "balClick",
          "detail": "MouseEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has clicked.",
          "docsTags": []
        },
        {
          "event": "balFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "balInput",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "balKeyPress",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard key has pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-timeinput/bal-timeinput.tsx",
      "encapsulation": "scoped",
      "tag": "bal-timeinput",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true` the button is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inverted",
          "type": "boolean",
          "mutable": false,
          "attr": "inverted",
          "reflectToAttr": false,
          "docs": "If `true` the timeinput can be used on blue background.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxTime",
          "type": "string",
          "mutable": false,
          "attr": "max-time",
          "reflectToAttr": false,
          "docs": "Latest date available for selection",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minTime",
          "type": "string",
          "mutable": false,
          "attr": "min-time",
          "reflectToAttr": false,
          "docs": "Earliest date available for selection",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the datepicker with the format `hh:mm`.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "balBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when either the hour or minute input field loses focus.",
          "docsTags": []
        },
        {
          "event": "balChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when either the hour or the minute input has changed.\nIt will not be triggert if either hour or time input has never been set (i.e. \"--\" is selected).",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/bal-toast/bal-toast.tsx",
      "encapsulation": "scoped",
      "tag": "bal-toast",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"\" | \"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The theme type of the toast. Given by bulma our css framework.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "\"\""
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "The duration of the toast in milliseconds.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "message",
          "type": "string",
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "Content message",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes this toast",
          "docsTags": []
        },
        {
          "name": "closeIn",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "closeIn(duration: number) => Promise<void>",
          "parameters": [],
          "docs": "Closes the toast after the given duration in ms",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "balClose",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when toast is closed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "bal-text",
        "bal-icon"
      ],
      "dependencyGraph": {
        "bal-toast": [
          "bal-text",
          "bal-icon"
        ]
      }
    }
  ]
}